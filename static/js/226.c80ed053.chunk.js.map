{"version":3,"file":"static/js/226.c80ed053.chunk.js","mappings":"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","sources":["components/galleries/list-display/ListCursor.js","components/galleries/list-display/ListDisplay.js","components/label/Label.js","components/smoothWrapper/SmoothWrapper.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { MenuContext } from \"../../../provider/MenuProvider\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction ListCursor(props) {\r\n    const { images } = useContext(MenuContext);\r\n    const cursorImgArr = images;\r\n\r\n    const currentIndex = props.pathIndex % cursorImgArr.length;\r\n\r\n    return ReactDOM.createPortal(\r\n        <AnimatePresence>\r\n            {props.showCursorImg && (\r\n                <motion.div\r\n                    initial={{ clipPath: 'inset(50% 50% 50% 50%)' }}\r\n                    animate={{ clipPath: 'inset(0% 0% 0% 0%)' }}\r\n                    exit={{ clipPath: 'inset(50% 50% 50% 50%)' }}\r\n                    transition={{ duration: 0.5, delay: 0.3 }} // Задержка в секундах\r\n                    style={{\r\n                        transform: `translate(-50%, -50%) translate(${props.positions.posX}px, ${props.positions.posY}px)`\r\n                    }}\r\n                    className=\"list-cursor\"\r\n                >\r\n                    <div className=\"cursor-images\">\r\n                        {cursorImgArr.map((img, i) => (\r\n                            <img\r\n                                style={{\r\n                                    clipPath:\r\n                                        currentIndex !== i\r\n                                            ? \"inset(0 0 0 100%)\"\r\n                                            : \"inset(0 0 0 0)\"\r\n                                }}\r\n                                src={img}\r\n                                key={i}\r\n                                alt={`img-${i + 1}`}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </motion.div>\r\n            )}\r\n        </AnimatePresence>,\r\n        document.getElementById('cursor-root')\r\n    );\r\n}\r\n\r\nexport default ListCursor;\r\n","import './ListDisplay.scss';\r\nimport { useContext } from 'react';\r\nimport { MenuContext } from '../../../provider/MenuProvider';\r\nimport data from '../../../data/data.json';\r\nimport Container from '../../containers/containers';\r\nimport { useState, useEffect } from 'react';\r\nimport Scrollbar from 'smooth-scrollbar';\r\n\r\nimport ListCursor from './ListCursor';\r\nimport { Link } from 'react-router-dom';\r\nimport PageTransition from '../../page-transition/PageTransition';\r\nimport SmoothWrapper from '../../smoothWrapper/SmoothWrapper';\r\nimport Label from '../../label/Label';\r\n\r\nfunction ListDisplay(props) {\r\n    const Arr = Object.values(data);\r\n    const [showCursorImg, setShowCursorImg] = useState(false)\r\n\r\n    const {changeCursor} = useContext(MenuContext)\r\n    const duplicatedArr = [...Arr, ...Arr, ...Arr, ...Arr]\r\n    const [pathIndex, setPathIndex] = useState(0)\r\n    useEffect(() => {\r\n        changeCursor(false)\r\n        setShowCursorImg(true)\r\n    }, [])\r\n\r\n \r\n\r\n    return (\r\n        <PageTransition  id='list-display'>  \r\n \r\n<SmoothWrapper>\r\n<Container>\r\n                    {props.isDesktopOrLaptop &&\r\n                        <ListCursor positions={props.positions}\r\n                            pathIndex={pathIndex}\r\n                            showCursorImg={showCursorImg} />}\r\n                    <ul >\r\n                        {duplicatedArr.map((item, i) => (\r\n                            <li key={i} className='list-item'\r\n                                onMouseMove={() => setPathIndex(i)}\r\n                                onMouseEnter={() => setShowCursorImg(true)}\r\n                                onMouseLeave={() => setShowCursorImg(false)}\r\n                            >\r\n\r\n                                <Link to={`/home/${i}`}>\r\n                                    <h4>{i}</h4>\r\n                                    <span>project name:</span>\r\n                                    <h4>{duplicatedArr[i].project_name}</h4>\r\n\r\n                                    <span>creation date:</span>\r\n                                    <span> {duplicatedArr[i].creation_date};</span>\r\n\r\n                                    <span>references:</span>\r\n                                    <p>{duplicatedArr[i].references.join(', ')};</p>\r\n\r\n                                    <span>color palette:</span>\r\n                                    <p className='colors-display'>\r\n                                        {duplicatedArr[i].color_palette.map((color, index) => (\r\n                                            <span key={index}>\r\n                                                {color.name}: <span style={{ backgroundColor: `${color.code}` }} className='color-display'></span>\r\n                                            </span>\r\n                                        ))}\r\n                                    </p>\r\n                                </Link>\r\n\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </Container>\r\n                <Label></Label>\r\n</SmoothWrapper>\r\n \r\n        </PageTransition>\r\n    );\r\n}\r\n\r\nexport default ListDisplay;\r\n//  \r\n","import { Row } from \"../containers/containers\"\r\nimport  Container from \"../containers/containers\"\r\nfunction Label() {\r\n\r\n    return <div className=\"label\">\r\n        <Container>\r\n            <Row>\r\n              \r\n                    <div className=\"propject-creation-date\">\r\n                      \r\n                        <span>{`[24.12.2023]`}</span>\r\n                    </div>\r\n         \r\n                <div className=\"author\">\r\n                    <span>{`[DavM02]`}</span>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default Label","import { useRef, useLayoutEffect } from 'react';\r\nimport Scrollbar from 'smooth-scrollbar';\r\n\r\nfunction SmoothWrapper(props) {\r\n  const scrollRef = useRef(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let scrollbar;\r\n\r\n    // Инициализируем скроллбар\r\n    const initScrollbar = () => {\r\n      scrollbar = Scrollbar.init(scrollRef.current, {\r\n        damping: 0.06,\r\n        alwaysShowTrack: true,\r\n        renderByPixels: true,\r\n \r\n      });\r\n    };\r\n\r\n    initScrollbar(); // Инициализируем скроллбар при монтировании\r\n\r\n    // Функция очистки, вызывается при размонтировании компонента\r\n    return () => {\r\n      if (scrollbar) {\r\n        // Уничтожаем скроллбар при размонтировании\r\n        scrollbar.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"scroll-wrapper\" ref={scrollRef}>\r\n     {props.children} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmoothWrapper;\r\n"],"names":["props","images","useContext","MenuContext","cursorImgArr","currentIndex","pathIndex","length","ReactDOM","_jsx","AnimatePresence","children","showCursorImg","motion","div","initial","clipPath","animate","exit","transition","duration","delay","style","transform","concat","positions","posX","posY","className","map","img","i","src","alt","document","getElementById","Arr","Object","values","data","setShowCursorImg","useState","changeCursor","duplicatedArr","setPathIndex","useEffect","PageTransition","id","_jsxs","SmoothWrapper","Container","isDesktopOrLaptop","ListCursor","item","onMouseMove","onMouseEnter","onMouseLeave","Link","to","project_name","creation_date","references","join","color_palette","color","index","name","backgroundColor","code","Label","Row","scrollRef","useRef","useLayoutEffect","scrollbar","Scrollbar","init","current","damping","alwaysShowTrack","renderByPixels","destroy","ref"],"sourceRoot":""}
{"version":3,"file":"static/js/896.94ece2b6.chunk.js","mappings":"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","sources":["components/galleries/grid-gallery/NextProject.js","components/galleries/grid-gallery/ModalData.js","components/galleries/grid-gallery/Overlay.js","components/galleries/grid-gallery/GridGallery.js","components/label/Label.js","components/smoothWrapper/SmoothWrapper.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\r\nimport { useEffect, useContext, useState } from \"react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { MenuContext } from \"../../../provider/MenuProvider\";\r\nimport SmoothScrollbar from \"smooth-scrollbar\";\r\nfunction NextProject(props) {\r\n    const { changeCursor, images, updateAllowNext } = useContext(MenuContext)\r\n    const duplicatedImages = [...images, ...images]\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        navigate(`?index=${props.i % props.Arr.length}`, { replace: true });\r\n    }, [props.i]);\r\n\r\n\r\n\r\n    return <>\r\n        <AnimatePresence mode=\"wait\">\r\n            {\r\n                props.showImage && <motion.div\r\n                    initial={{ opacity: 0, }}\r\n                    animate={{ opacity: 1, }}\r\n                    exit={{ opacity: 0, }}\r\n                    transition={{ duration: 0.5, ease: [0.86, 0, 0.07, 1] }}\r\n                    className=\"next-project\">\r\n                    <div className=\"next-project-image\">\r\n                        <img src={duplicatedImages[props.i % props.Arr.length + 1]} />\r\n                    </div>\r\n                    <div className=\"switch-to-next\"\r\n                        onMouseEnter={() => changeCursor(true)}\r\n\r\n                        onMouseLeave={() => changeCursor(null)}\r\n                        onClick={() => {\r\n                            if (props.allowNext) {\r\n\r\n                                props.setSelectedItemIndex(props.i % props.Arr.length + 1);\r\n                                props.setText(props.Arr[(props.i + 1) % props.Arr.length].description)\r\n\r\n                                updateAllowNext(false)\r\n                                props.setAllAnimationComplete([])\r\n                            }\r\n                        }} >\r\n                        Next\r\n                        <br /> Project\r\n\r\n                    </div>\r\n                </motion.div>\r\n            }\r\n        </AnimatePresence>\r\n    </>\r\n}\r\n\r\nexport default NextProject","import { useEffect, useState, useContext } from 'react';\r\nimport { MenuContext } from '../../../provider/MenuProvider';\r\nimport data from '../../../data/data.json'\r\nimport { AnimatePresence, motion } from 'framer-motion';\r\nimport NextProject from './NextProject';\r\nfunction ModalData(props) {\r\n\r\n\r\n    const Arr = Object.values(data);\r\n    const [text, setText] = useState(Arr[props.i % Arr.length].description)\r\n    const {allowNext, updateAllowNext} = useContext(MenuContext)\r\n    const [allAnimationComplete, setAllAnimationComplete] = useState([])\r\n\r\n    useEffect(() => {\r\n        const words = text.split(' ');\r\n        const lines = [];\r\n\r\n        for (let i = 0; i < words.length; i += 6) {\r\n            const line = words.slice(i, i + 6).join(' ');\r\n            lines.push(line);\r\n        }\r\n        lines.push(`creation date: ${Arr[props.i % Arr.length].creation_date};`,\r\n            'references:',\r\n            ...Arr[props.i % Arr.length].references,\r\n            'color palette:',\r\n            ...Arr[props.i % Arr.length].color_palette.map(color => {\r\n                return <>\r\n                    {color.name}: <span style={{ backgroundColor: `${color.code}` }} className='color-display'></span>\r\n                </>\r\n            }),\r\n        )\r\n\r\n        setText(lines);\r\n    }, [props.i]);\r\n\r\n    useEffect(() => {\r\n        if (allAnimationComplete.length > 0 && allAnimationComplete.length === text.length) {\r\n            updateAllowNext(true)\r\n \r\n        }  \r\n    }, [allAnimationComplete, text])\r\n\r\n    return <div className=\"modal-data\">\r\n        <div style={{ height: '80px' }}>\r\n            <AnimatePresence mode='wait'>\r\n                {\r\n                    props.showImage && <motion.h3\r\n                        key={'heading'}\r\n                        initial={{ opacity: 0, transform: 'translateY(7px)' }}\r\n                        animate={{ opacity: 1, transform: 'translateY(0px)' }}\r\n                        exit={{ opacity: 0, transform: 'translateY(7px)' }}\r\n                        transition={{ duration: 0.5, ease: [0.86, 0, 0.07, 1] }} >\r\n                        {Arr[props.i % Arr.length].project_name}\r\n                    </motion.h3>\r\n                }\r\n            </AnimatePresence>\r\n        </div>\r\n        <div className='text'>\r\n            {\r\n                Array.isArray(text) && text.length > 0 && text.map((line, i) => (\r\n\r\n                    <div className='text-line' key={i}>\r\n                        <AnimatePresence mode='wait' key={i}>\r\n                            {props.showImage && <motion.div\r\n                                initial={{ opacity: 0, transform: 'translateY(7px)' }}\r\n                                animate={{ opacity: 1, transform: 'translateY(0px)' }}\r\n                                exit={{ opacity: 0, transform: 'translateY(7px)' }}\r\n                                transition={{ duration: 0.5, ease: [0.86, 0, 0.07, 1], delay: i * 0.1 }}\r\n                                onAnimationComplete={() => setAllAnimationComplete(prevArr => [...prevArr, 1])}\r\n                                key={i}>\r\n                                {line}\r\n                            </motion.div>}\r\n                        </AnimatePresence>\r\n                    </div>\r\n\r\n                ))\r\n            }\r\n\r\n        </div>\r\n        <NextProject\r\n            setSelectedItemIndex={props.setSelectedItemIndex}\r\n            i={props.i}\r\n            showImage={props.showImage}\r\n            setText={setText}\r\n            Arr={Arr}\r\n            allowNext={allowNext}\r\n            setAllAnimationComplete={setAllAnimationComplete}\r\n\r\n        ></NextProject>\r\n    </div>\r\n}\r\n\r\nexport default ModalData","import { AnimatePresence, motion } from \"framer-motion\";\r\nimport { useState, useContext, useEffect } from \"react\";\r\nimport { MenuContext } from \"../../../provider/MenuProvider\";\r\nimport ModalData from \"./ModalData\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nfunction Overlay(props) {\r\n\r\n    const [showImage, setShowImage] = useState(false)\r\n\r\n    const { changeCursor, updateAllowNext, allowNext } = useContext(MenuContext)\r\n    const location = useLocation()\r\n    const currentPathname = location.pathname\r\n    const navigate = useNavigate()\r\n    const [addOpacity, setAddOpacity] = useState(false)\r\n    useEffect(() => {\r\n        const handlePopstate = (e) => {\r\n            if (location.pathname === '/grid-gallery' && location.search.trim().length > 0) {\r\n                setShowImage(false)\r\n                changeCursor(false)\r\n                // navigate(currentPathname, { replace: false });\r\n            }\r\n        };\r\n\r\n        window.addEventListener('popstate', handlePopstate);\r\n\r\n        return () => {\r\n            window.removeEventListener('popstate', handlePopstate);\r\n        };\r\n    }, [location.pathname, location.search]);\r\n\r\n    useEffect(() => {\r\n        const handlePopstate = (e) => {\r\n            if (props.showOverlay) {\r\n                setAddOpacity(true)\r\n            }\r\n        };\r\n\r\n        window.addEventListener('popstate', handlePopstate);\r\n\r\n        return () => {\r\n            window.removeEventListener('popstate', handlePopstate);\r\n            setAddOpacity(false)\r\n        };\r\n\r\n    }, [props.showOverlay])\r\n\r\n    return <AnimatePresence mode=\"wait\">\r\n        {\r\n            props.showOverlay && <motion.div\r\n                style={{ opacity: addOpacity ? \"0\" : '1' }}\r\n                onMouseEnter={() => changeCursor(null)}\r\n                onMouseLeave={() => changeCursor(false)}\r\n                key={'overlay'}\r\n                initial={{ clipPath: 'inset(100% 0 0 0)' }}\r\n                animate={{ clipPath: 'inset(0 0 0 0 )' }}\r\n                exit={{ clipPath: 'inset(100% 0 0 0)' }}\r\n                onAnimationComplete={() => props.animationState ? setShowImage(true) : props.setIsTransparent(false)}\r\n                transition={{ duration: 1.5, ease: [0.86, 0, 0.07, 1] }} // Задержка в секундах\r\n                className=\"overlay\">\r\n                <div className=\"modal-layout\">\r\n                    <div className=\"close-modal\"\r\n                        onMouseEnter={() => changeCursor(true)}\r\n\r\n                        onMouseLeave={() => changeCursor(null)}\r\n\r\n                        onClick={(e) => {\r\n                            if (allowNext) {\r\n                                setShowImage(false)\r\n                                changeCursor(false)\r\n                                navigate(currentPathname, { replace: true });\r\n                                updateAllowNext(false)\r\n                            }\r\n\r\n                        }\r\n                        }>Close</div>\r\n                    <div className=\"modal-image\">\r\n                        <AnimatePresence mode=\"wait\">\r\n                            {showImage && (\r\n                                <motion.div\r\n                                    key={'modal-image'}\r\n                                    initial={{ clipPath: 'inset(100% 0 0 0)' }}\r\n                                    animate={{ clipPath: 'inset(0 0 0 0 )' }}\r\n                                    exit={{ clipPath: 'inset(100% 0 0 0)' }}\r\n                                    transition={{ duration: 1.5, ease: [0.86, 0, 0.07, 1] }}\r\n                                    className=\"selected-image\"\r\n                                    onAnimationComplete={() => {\r\n                                        props.setAnimationState(false)\r\n                                        if (props.animationState === false) {\r\n                                            props.setShowOverlay(false)\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    <img src={props.imgSrc} alt=\"selected\" />\r\n                                </motion.div>\r\n                            )}\r\n                        </AnimatePresence>\r\n                    </div>\r\n                    <ModalData i={props.i}\r\n                        showImage={showImage}\r\n                        animationState={props.animationState}\r\n                        setShowOverlay={props.setShowOverlay}\r\n                        setSelectedItemIndex={props.setSelectedItemIndex}\r\n                    ></ModalData>\r\n\r\n                </div>\r\n            </motion.div>\r\n        }\r\n    </AnimatePresence >\r\n}\r\n\r\nexport default Overlay","import PageTransition from \"../../page-transition/PageTransition\";\r\nimport './GridGallery.scss'\r\nimport { MenuContext } from \"../../../provider/MenuProvider\";\r\nimport { useContext, useState, } from \"react\";\r\n\r\nimport Overlay from \"./Overlay\";\r\nimport data from '../../../data/data.json'\r\nimport ReactDOM from \"react-dom\";\r\n\r\n\r\nimport SmoothWrapper from \"../../smoothWrapper/SmoothWrapper\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport Label from \"../../label/Label\";\r\n\r\nfunction GridGallery() {\r\n    const Arr = Object.values(data);\r\n\r\n\r\n\r\n\r\n    const { images, changeCursor } = useContext(MenuContext)\r\n\r\n    const duplicatedImages = [...images, ...images]\r\n\r\n    const initialLoadedStates = Object.fromEntries(duplicatedImages.map((_, index) => [index, false]));\r\n    const [loadedStates, setLoadedStates] = useState({ initialLoadedStates });\r\n\r\n    const handleImageLoad = (index) => {\r\n\r\n        setLoadedStates(prevStates => ({\r\n            ...prevStates,\r\n            [index]: true,\r\n        }));\r\n\r\n    };\r\n\r\n\r\n    const [selectedItemIndex, setSelectedItemIndex] = useState(null);\r\n    const [animationState, setAnimationState] = useState(false)\r\n    const [isTransparent, setIsTransparent] = useState(false)\r\n    const [showOverlay, setShowOverlay] = useState(false)\r\n\r\n    function handleClick(e, i) {\r\n        // Если клик произошел на уже выбранном элементе, сбросить selectedItemIndex в null\r\n        setSelectedItemIndex(i);\r\n        setAnimationState(true)\r\n        setIsTransparent(true)\r\n        // Остальной код остается без изменений\r\n\r\n    }\r\n    return <PageTransition id='grid-gallery'\r\n\r\n    >\r\n        {/* <Container> */}\r\n        <SmoothWrapper>\r\n            <div className='grid-wrapper'>\r\n                {\r\n                    duplicatedImages.map((img, i) => (\r\n                        <div\r\n                            key={i}\r\n                            className={`grid-item ${isTransparent ? 'selected' : 'unselected'}`}\r\n                            onMouseEnter={() => changeCursor(3)}\r\n                            onMouseLeave={() => changeCursor(false)}\r\n                            onTransitionEnd={() => animationState && setShowOverlay(true)}\r\n\r\n                        >\r\n                            <div className=\"grid-content\"\r\n                              style={{ opacity: !loadedStates[i] ? '0' : '1' }}\r\n                                onClick={(e) => handleClick(e, i)}\r\n                            >\r\n                                <img src={duplicatedImages[i]}\r\n                                  loading=\"lazy\"\r\n                                   onLoad={() => handleImageLoad(i)}\r\n                                />\r\n                                <p>{Arr[i % Arr.length].project_name}</p>\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n            <Label></Label>\r\n        </SmoothWrapper>\r\n\r\n        {/* </Container> */}\r\n        {\r\n            ReactDOM.createPortal(<Overlay\r\n                i={selectedItemIndex}\r\n                setSelectedItemIndex={setSelectedItemIndex}\r\n                setIsTransparent={setIsTransparent}\r\n                setShowOverlay={setShowOverlay}\r\n                setAnimationState={setAnimationState}\r\n                animationState={animationState}\r\n                showOverlay={showOverlay}\r\n                imgSrc={duplicatedImages[selectedItemIndex % Arr.length]}></Overlay>,\r\n                document.getElementById('modal-root')\r\n            )\r\n        }\r\n\r\n    </PageTransition>\r\n}\r\n\r\nexport default GridGallery\r\n\r\n\r\n","import { Row } from \"../containers/containers\"\r\nimport  Container from \"../containers/containers\"\r\nfunction Label() {\r\n\r\n    return <div className=\"label\">\r\n        <Container>\r\n            <Row>\r\n              \r\n                    <div className=\"propject-creation-date\">\r\n                      \r\n                        <span>{`[24.12.2023]`}</span>\r\n                    </div>\r\n         \r\n                <div className=\"author\">\r\n                    <span>{`[DavM02]`}</span>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    </div>\r\n}\r\n\r\nexport default Label","import { useRef, useLayoutEffect } from 'react';\r\nimport Scrollbar from 'smooth-scrollbar';\r\n\r\nfunction SmoothWrapper(props) {\r\n  const scrollRef = useRef(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let scrollbar;\r\n\r\n    // Инициализируем скроллбар\r\n    const initScrollbar = () => {\r\n      scrollbar = Scrollbar.init(scrollRef.current, {\r\n        damping: 0.06,\r\n        alwaysShowTrack: true,\r\n        renderByPixels: true,\r\n \r\n      });\r\n    };\r\n\r\n    initScrollbar(); // Инициализируем скроллбар при монтировании\r\n\r\n    // Функция очистки, вызывается при размонтировании компонента\r\n    return () => {\r\n      if (scrollbar) {\r\n        // Уничтожаем скроллбар при размонтировании\r\n        scrollbar.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"scroll-wrapper\" ref={scrollRef}>\r\n     {props.children} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmoothWrapper;\r\n"],"names":["props","changeCursor","images","updateAllowNext","useContext","MenuContext","duplicatedImages","navigate","useNavigate","useEffect","concat","i","Arr","length","replace","_jsx","_Fragment","children","AnimatePresence","mode","showImage","_jsxs","motion","div","initial","opacity","animate","exit","transition","duration","ease","className","src","onMouseEnter","onMouseLeave","onClick","allowNext","setSelectedItemIndex","setText","description","setAllAnimationComplete","Object","values","data","text","useState","allAnimationComplete","words","split","lines","line","slice","join","push","creation_date","references","color_palette","map","color","name","style","backgroundColor","code","height","h3","transform","project_name","Array","isArray","delay","onAnimationComplete","prevArr","NextProject","setShowImage","location","useLocation","currentPathname","pathname","addOpacity","setAddOpacity","handlePopstate","e","search","trim","window","addEventListener","removeEventListener","showOverlay","clipPath","animationState","setIsTransparent","setAnimationState","setShowOverlay","imgSrc","alt","ModalData","initialLoadedStates","fromEntries","_","index","loadedStates","setLoadedStates","selectedItemIndex","isTransparent","PageTransition","id","SmoothWrapper","img","onTransitionEnd","handleClick","loading","onLoad","handleImageLoad","prevStates","Label","ReactDOM","Overlay","document","getElementById","Container","Row","scrollRef","useRef","useLayoutEffect","scrollbar","Scrollbar","init","current","damping","alwaysShowTrack","renderByPixels","destroy","ref"],"sourceRoot":""}
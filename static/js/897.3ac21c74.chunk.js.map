{"version":3,"file":"static/js/897.3ac21c74.chunk.js","mappings":"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","sources":["components/galleries/full-screen-display/LinkItem.js","components/galleries/full-screen-display/FullScreenDisplay.js"],"sourcesContent":["import { useContext, useRef, useState, useEffect } from 'react'\r\nimport { createRef } from 'react'\r\nimport { MenuContext } from '../../../provider/MenuProvider'\r\nimport data from '../../../data/data.json'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction LinkItem(props) {\r\n    const { images } = useContext(MenuContext);\r\n    const Arr = Object.values(data);\r\n    const duplicatedArr = [...Arr, ...Arr]\r\n    const duplicatedImages = [...images, ...images];\r\n\r\n\r\n\r\n    // const liRefs = useRef([])\r\n    // liRefs.current = duplicatedArr.map((element, i) => liRefs.current[i] ?? createRef());\r\n\r\n\r\n    return <>\r\n        {duplicatedArr.map((item, i) => (\r\n            <li key={i} className='list-item'\r\n                // ref={liRefs.current[i]}\r\n                style={{ left: \r\n                    props.isDesktop  ? `${(-100 * props.posX) / props.scrollbarWidth}%` : \r\n                      `${props.posX}px`   }}\r\n            >\r\n                <div className='full-screen-image'>\r\n                    <img src={duplicatedImages[i]}\r\n\r\n                        alt={`img=${i + 1}`}></img>\r\n                </div>\r\n                <Link to={`/home/${i}`} style={{ cursor: props.drag ? 'grabbing' : 'pointer' }}>\r\n\r\n                    <div>\r\n                        <h3>{duplicatedArr[i].project_name}</h3>\r\n\r\n\r\n                        <span style={{ marginTop: '10px' }}>creation date:\r\n                            <br /> {duplicatedArr[i].creation_date};\r\n                        </span>\r\n\r\n                        <span style={{ marginTop: '10px' }}>references:\r\n                            <br />  {duplicatedArr[i].references.join(', ')};\r\n                        </span>\r\n\r\n\r\n                        <span style={{ marginTop: '10px' }}>color palette:</span>\r\n                        <p className='colors-display'>\r\n                            {duplicatedArr[i].color_palette.map((color, index) => (\r\n                                <span key={index}>\r\n                                    {color.name}: <span style={{ backgroundColor: `${color.code}` }} className='color-display'></span>\r\n                                </span>\r\n                            ))}\r\n                        </p>\r\n                    </div>\r\n                    <h1>{i}</h1>\r\n                </Link>\r\n\r\n            </li>\r\n        ))}\r\n    </>\r\n}\r\n\r\nexport default LinkItem","import { useState, useRef, useCallback, useEffect, useContext } from 'react';\r\nimport { MenuContext } from '../../../provider/MenuProvider';\r\nimport LinkItem from './LinkItem';\r\nimport PageTransition from '../../page-transition/PageTransition';\r\nimport './FullScreenDisplay.scss';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nfunction FullScreenDisplay() {\r\n    const [drag, setDrag] = useState(false);\r\n    const [startX, setStartX] = useState(null);\r\n    const [posX, setPosX] = useState(0);\r\n    const [isLastElementVisible, setIsLastElementVisible] = useState(false);\r\n    const [thumbnailWidth, setThumbnailWidth] = useState(false)\r\n    const ulRef = useRef(null);\r\n    const { changeCursor } = useContext(MenuContext)\r\n    const scrollbarRef = useRef(null);\r\n    const ulWidth = 285 * 40 + 390;\r\n\r\n\r\n    const isDesktop = useMediaQuery({\r\n        query: '(min-device-width: 824px)'\r\n    });\r\n\r\n\r\n    const handleMouseDown = useCallback((data) => {\r\n        setDrag(true);\r\n        setStartX(data);\r\n    }, [posX, startX]);\r\n\r\n    const handleMouseMove = useCallback((data) => {\r\n        if (!drag) return;\r\n\r\n        let deltaX = data - startX;\r\n        let newPos = posX + deltaX;\r\n\r\n     \r\n\r\n        if (!isDesktop) {\r\n            if (newPos > 0) {\r\n                newPos = 0;\r\n            }\r\n        } else {\r\n            if (newPos < 0) {\r\n                newPos = 0;\r\n            }\r\n\r\n        }\r\n\r\n        setPosX(newPos);\r\n        setStartX(data);\r\n    }, [startX, posX]);\r\n\r\n\r\n    const handleMouseUp = useCallback(() => {\r\n        setDrag(false);\r\n\r\n    }, [posX, startX]);\r\n\r\n    const scrollbarWidth = scrollbarRef.current && scrollbarRef.current.offsetWidth;\r\n\r\n\r\n    useEffect(() => {\r\n        changeCursor(false)\r\n    }, [])\r\n\r\n\r\n    const handleIntersection = (entries) => {\r\n        const lastEntry = entries[entries.length - 1];\r\n        const isFullyVisible = lastEntry.isIntersecting && lastEntry.intersectionRatio === 1.0;\r\n\r\n        if (isFullyVisible) {\r\n            setPosX(0);\r\n            setStartX(0);\r\n            setDrag(false);\r\n        }\r\n\r\n        setIsLastElementVisible(lastEntry.isIntersecting);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(handleIntersection, {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 1.0, // Adjust as needed\r\n        });\r\n\r\n        const lastElement = ulRef.current.lastElementChild;\r\n        if (lastElement) {\r\n            observer.observe(lastElement);\r\n        }\r\n\r\n        return () => {\r\n            if (lastElement) {\r\n                observer.unobserve(lastElement);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const updateThumbnailWidth = () => {\r\n            const scrollbarWidth = scrollbarRef.current && scrollbarRef.current.offsetWidth;\r\n            const thumbnailWidth = (scrollbarWidth / ulWidth) * scrollbarWidth;\r\n            setThumbnailWidth(thumbnailWidth);\r\n            setPosX(0);\r\n            setStartX(0);\r\n            setDrag(false);\r\n        };\r\n\r\n        // Вызывайте функцию обновления ширины thumbnail при монтировании компонента\r\n        updateThumbnailWidth();\r\n\r\n        // Добавьте слушатель события resize для обновления ширины thumbnail при изменении размеров окна\r\n        window.addEventListener('resize', updateThumbnailWidth);\r\n\r\n        // Очистите слушатель события при размонтировании компонента\r\n        return () => {\r\n            window.removeEventListener('resize', updateThumbnailWidth);\r\n        };\r\n    }, [ulWidth]); // Зависимость от ulWidth гарантирует обновление thumbnail при изменении этого значения\r\n\r\n    function mouseWheelHandler(e) {\r\n        // Получаем значение прокрутки\r\n        const delta = e.deltaY;\r\n\r\n        // Обрабатываем прокрутку, например, изменяем позицию на основе delta\r\n        const newPos = posX + delta;\r\n\r\n        // Убеждаемся, что новая позиция находится в пределах допустимых значений\r\n        if (newPos < 0) {\r\n            setPosX(0);\r\n        } else if (newPos > ulWidth - scrollbarWidth) {\r\n            setPosX(ulWidth - scrollbarWidth);\r\n        } else {\r\n            setPosX(newPos);\r\n        }\r\n\r\n        // Останавливаем стандартное поведение прокрутки страницы\r\n\r\n    }\r\n\r\n    return (\r\n        <PageTransition id=\"full-screen-display\"\r\n            onMouseUp={() => handleMouseUp()}\r\n            onTouchCancel={() => isDesktop && handleMouseUp()}\r\n            onTouchEnd={() => isDesktop && handleMouseUp()}\r\n            onTouchMove={(e) => isDesktop && \r\n                handleMouseMove(e.touches[0].clientX)\r\n             }\r\n            onMouseMove={(e) => {\r\n                handleMouseMove(e.clientX);\r\n            }}\r\n\r\n            onWheel={(e) => isDesktop && mouseWheelHandler(e)}\r\n        > {\r\n                isDesktop && <div\r\n                    className=\"custom-scrollbar\"\r\n                    ref={scrollbarRef}\r\n\r\n                >\r\n                    <div\r\n                        className=\"custom-scrollbar-thumb\"\r\n\r\n                        style={{\r\n                            cursor: drag ? 'grabbing' : 'grab',\r\n                            width: `${thumbnailWidth}px`, // устанавливаем ширину thumbnail\r\n                            left: `${(100 * posX) / scrollbarWidth}%`,\r\n                            opacity: drag ? '100%' : '70%',\r\n                            scale: drag ? '90%' : 'none',\r\n                        }}\r\n                        onMouseDown={(e) => {\r\n                            handleMouseDown(e.clientX);\r\n                        }}\r\n                        onMouseUp={() => handleMouseUp()}\r\n                        onTouchStart={(e) => handleMouseDown(e.touches[0].clientX)}\r\n                        onTouchCancel={() => handleMouseUp()}\r\n                        onTouchEnd={() => handleMouseUp()}\r\n                    ></div>\r\n                </div>\r\n            }\r\n\r\n            <ul ref={ulRef}\r\n                onTouchStart={(e) => !isDesktop && handleMouseDown(e.touches[0].clientX)}\r\n                onTouchMove={(e) => !isDesktop && handleMouseMove(e.touches[0].clientX)}\r\n                onTouchEnd={() => !isDesktop && handleMouseUp()}\r\n                onTouchCancel={() => !isDesktop && handleMouseUp()}\r\n            >\r\n                <LinkItem\r\n                    drag={drag}\r\n                    posX={posX}\r\n                    scrollbarWidth={scrollbarWidth}\r\n                    isDesktop={isDesktop}\r\n\r\n                ></LinkItem>\r\n            </ul>\r\n        </PageTransition>\r\n    );\r\n}\r\n\r\nexport default FullScreenDisplay;\r\n"],"names":["props","images","useContext","MenuContext","Arr","Object","values","data","duplicatedArr","duplicatedImages","_jsx","_Fragment","children","map","item","i","_jsxs","className","style","left","isDesktop","concat","posX","scrollbarWidth","src","alt","Link","to","cursor","drag","project_name","marginTop","creation_date","references","join","color_palette","color","index","name","backgroundColor","code","setDrag","useState","startX","setStartX","setPosX","isLastElementVisible","setIsLastElementVisible","thumbnailWidth","setThumbnailWidth","ulRef","useRef","changeCursor","scrollbarRef","ulWidth","useMediaQuery","query","handleMouseDown","useCallback","handleMouseMove","newPos","handleMouseUp","current","offsetWidth","useEffect","handleIntersection","entries","lastEntry","length","isIntersecting","intersectionRatio","observer","IntersectionObserver","root","rootMargin","threshold","lastElement","lastElementChild","observe","unobserve","updateThumbnailWidth","window","addEventListener","removeEventListener","PageTransition","id","onMouseUp","onTouchCancel","onTouchEnd","onTouchMove","e","touches","clientX","onMouseMove","onWheel","delta","deltaY","mouseWheelHandler","ref","width","opacity","scale","onMouseDown","onTouchStart","LinkItem"],"sourceRoot":""}